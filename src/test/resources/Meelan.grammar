{{{package test;

import meelan.*
}}}

grammar Meelan {
    regex ws: [\x09\x0b\r \xa0\u1680\u2000-\u200a\u202f\u205f\u3000]+ ;
	regex nl: "\r\n" | "\n" | "\x0c" | "\x85" | "\u2028" | "\u2029" ; // keep newlines separated for formatting.
    regex slComment: ('/*' .* '*/')! ;
    regex mlComment: '//' ([^\n] | [^\r])* ;

{{{    init {
        tokenizer.addSkipped(ws.tokenId)
        tokenizer.addSkipped(nl.tokenId)
        tokenizer.addSkipped(slComment.tokenId)
        tokenizer.addSkipped(mlComment.tokenId)
    }
}}}

    fragment intRex: [0-9]{1,8} ;
    fragment hexRex: [0-9A-Fa-f]{1,8} ;
    fragment decimals: '.'[0-9]* ;
    fragment exponent: [eE]'-'?[0-9]+ ;
    fragment realRex: [0-9]+(decimals | exponent | decimals exponent) ;
    fragment identifierRex: [a-zA-Z_][a-zA-Z0-9_]* ;
    fragment stringRex: ('"' ([^\\"] | '\\'. )* '"') ;

    intNum: regex(intRex, `test.meelan.Utils.toInt`) ;
    realNum: regex(realRex, `test.meelan.Utils.toReal`) ;
    hexNum: regex(hexRex, `test.meelan.Utils.toHex`) ;
    str: regex(stringRex, `test.meelan.Utils.toEscString`) ;
    identifier: regex(identifierRex, `test.meelan.Utils.toIdString`) ;

    intNode: (intNum | hexNum) `test.meelan.Utils.toIntNode` ;
    realNode: realNum `test.meelan.Utils.toRealNode` ;
    stringNode: str `test.meelan.Utils.toStringNode` ;
    idNode: identifier `test.meelan.Utils.toIdNode` ;

    comma: ',' @ `Annot.Comma` ;
    exprList: `test.meelan.Utils.list` `comma.join(expr.fold(test.meelan.Utils.append))` ;

    vectorNode: '[' exprList `test.meelan.Utils.toVectorNode` ']' ;

    atom: intNode     @ `Annot.Num`
        | realNode    @ `Annot.Num`
        | stringNode  @ `Annot.Str`
        | idNode      @ `Annot.Id`
        | vectorNode
        | '(' expr ')' ;

    qualified: atom ('.' identifier >> `test.meelan.Utils.toQualified`)* ;

    arguments: '(' exprList ')' (app >> `test.meelan.Utils.listApply`)? | app `test.meelan.Utils.toSingleton` ;

    app<SyntaxNode>: qualified (arguments >> `test.meelan.Utils.toApp`)? ; // recursive because of eg "sin cos x"

    ifExpr<SyntaxNode>: 'if' @ `Annot.Kw` `test.meelan.Utils.properties`
                        '(' expr >> `test.meelan.Utils.set("condition")` ')'
                        stmt >> `test.meelan.Utils.set("thenBranch")`
                        (
							'else' @ `Annot.Kw` stmt >> `test.meelan.Utils.set("elseBranch")`
								`test.meelan.Utils.create(IfElse::class.java, true, "condition", "thenBranch", "elseBranch")`
							| `test.meelan.Utils.create(If::class.java, true, "condition", "thenBranch")`
						) ;

	block: '{' stmts `test.meelan.Utils.toBlock` '}' ;

	absExpr: '|' expr `test.meelan.Utils.toUnary(Op.Abs)` '|' ;

    term: app | ifExpr | block | absExpr ;

    literal<SyntaxNode>: '-' literal `test.meelan.Utils.toUnary(Op.Neg)`
                       | '/' literal `test.meelan.Utils.toUnary(Op.Recip)`
                       | literal
                       ;

    cons: literal (':' literal >> `test.meelan.Utils.toBinary(Op.Cons)`)? ;

    pow<SyntaxNode>: cons ('^' pow >> `test.meelan.Utils.toBinary(Op.Pow)`)? ;

    product: pow ('*' pow >> `test.meelan.Utils.toBinary(Op.Mul)` | '/' pow >> `test.meelan.Utils.toBinary(Op.Div)` | '%'  pow >> `test.meelan.Utils.toBinary(Op.Mod)` )* ;

    sum: product ('+' product >> `test.meelan.Utils.toBinary(Op.Add)` | '-' product >> `test.meelan.Utils.toBinary(Op.Sub)` )* ;

	cmp : sum
		( '>' sum >> `test.meelan.Utils.toBinary(Op.Greater)`
		| '>=' sum >> `test.meelan.Utils.toBinary(Op.GreaterEqual)`
		| '<=' sum >> `test.meelan.Utils.toBinary(Op.LessEqual)`
		| '<' sum >> `test.meelan.Utils.toBinary(Op.Less)`
		| '==' sum >> `test.meelan.Utils.toBinary(Op.Equal)`
		| '!=' sum >> `test.meelan.Utils.toBinary(Op.NotEqual)`
		)? ;

	logicalLit: 'not' cmp `test.meelan.Utils.toUnary(Op.Not)` | cmp ;
	logicalAnd: logicalLit ('and' logicalLit >> `test.meelan.Utils.toBinary(Op.And)`)* ;
	logicalXor: logicalAnd ('xor' logicalAnd >> `test.meelan.Utils.toBinary(Op.Xor)`)* ;
	logicalOr: logicalXor ('or' logicalXor >> `test.meelan.Utils.toBinary(Op.Or)`)* ;

	expr<SyntaxNode>: logicalOr ;

	exprstmt: expr ('=' expr >> `test.meelan.Utils.toBinary(Op.Assign)`)? ;

	whilestmt: 'while' @ `Annot.Kw` `test.meelan.Utils.properties`
			   '(' expr >> `test.meelan.Utils.set("condition")` ')'
			   (stmt >> `test.meelan.Utils.set("body")`)?
			   `test.meelan.Utils.create(While::class.java, true, "condition", "body")` ;

	forstmt: 'for' @ `Annot.Kw` `test.meelan.Utils.properties` '(' identifier >> `test.meelan.Utils.set("name")` 'in' expr >> `test.meelan.Utils.set("range")` ')' stmt  >> `test.meelan.Utils.set("body")`
			 `test.meelan.Utils.create(For::class.java, true, "name", "range", "body")`;

 	stmt<SyntaxNode>: (exprstmt | whilestmt | forstmt) ';'? ;

	vardecl: 'var' @ `Annot.DeclKw` `test.meelan.Utils.properties`
	            identifier >> `test.meelan.Utils.set("name")`
				(':' identifier >> `test.meelan.Utils.set("type")`)?
				('=' expr >> `test.meelan.Utils.set("init")`)?
				`test.meelan.Utils.create(VarDecl::class.java, true, "name", "type", "init")` ;

	parameter: 'var' @ `Annot.DeclKw` `test.meelan.Utils.properties` identifier >> `test.meelan.Utils.set("name")`
	            (':' identifier >> `test.meelan.Utils.set("type")`)?
	            `test.meelan.Utils.create(VarParameter::class.java, true, "name", "type")`
	            | idNode ;

	parameters: `test.meelan.Utils.list` `comma.join(parameter.fold(test.meelan.Utils.append))` ;

	fundecl: 'fun' @ `Annot.DeclKw` `test.meelan.Utils.properties` identifier >> `test.meelan.Utils.set("name")`
				'(' parameters >> `test.meelan.Utils.set("parameters")` ')'
				block >> `test.meelan.Utils.set("body")`
				`test.meelan.Utils.create(FunDecl::class.java, true, "name", "parameters", "body")` ;

	classdecl: 'class' @ `Annot.DeclKw` `test.meelan.Utils.properties` identifier >> `test.meelan.Utils.set("name")`
				('(' parameters ')' | `test.meelan.Utils.list`) >> `test.meelan.Utils.set("parameters")`
				block >> `test.meelan.Utils.set("body")`
				`test.meelan.Utils.create(ClassDecl::class.java, true, "name", "parameters", "body")` ;

	defdecl: 'def' @ `Annot.DeclKw`  `test.meelan.Utils.properties` identifier >> `test.meelan.Utils.set("name")`
	         '=' expr >> `test.meelan.Utils.set("body")`
	         `test.meelan.Utils.create(DefDecl::class.java, true, "name", "body")`; // alias.

	decl: (vardecl | fundecl | classdecl | defdecl) ';'? ;

	stmts<`List<SyntaxNode>`>: `test.meelan.Utils.list` ((stmt | decl) @ `Annot.Stmt` >> `test.meelan.Utils.append`)* ;
	program: stmts `test.meelan.Utils.toBlock` ;
}