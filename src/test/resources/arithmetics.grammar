{{{package at.searles.parsing.tools.generator.test;
}}}

grammar Arithmetics {

    regex ws: [ \n\r\t]+ ;

{{{    init {
        tokenizer.addSkipped(ws.tokenId)
    }
}}}

    num: regex([0-9], `{ num -> num[0].toInt() - '0'.toInt() }`) ;
    term: num | '(' sum ')' ;
    literal: '-' term `Mapping{ _, i: Int -> -i }` | term ;
    product: num ('*' num >> `{_, l: Int, r -> l * r}` | '/' num >> `{_, l: Int, r -> l / r}` )* ;
    sum<`Int`>: num ('+' num >> `{_, l: Int, r -> l + r}` | '-' num >> `{_, l: Int, r -> l - r}` )* ;
}